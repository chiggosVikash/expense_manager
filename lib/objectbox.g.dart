// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/expense_model.dart';
import 'models/setting_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4791173969908105495),
      name: 'ExpenseModel',
      lastPropertyId: const IdUid(10, 7040886606070884400),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6678430122419427611),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2172399730869849138),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3715152626601895286),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8108148766279133845),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2886271306695315435),
            name: 'note',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7528867127698174122),
            name: 'image',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7067759925858478400),
            name: 'expenseBy',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5482094286842552197),
            name: 'billNo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5483963263697870611),
            name: 'subCategory',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7040886606070884400),
            name: 'modelId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4997237247394043382),
      name: 'SettingModel',
      lastPropertyId: const IdUid(5, 6784797696628773863),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 621668577646201070),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 7242900233906877084),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6784797696628773863),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 4997237247394043382),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [9068439527978561873, 8706653775848322583],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ExpenseModel: EntityDefinition<ExpenseModel>(
        model: _entities[0],
        toOneRelations: (ExpenseModel object) => [],
        toManyRelations: (ExpenseModel object) => {},
        getId: (ExpenseModel object) => object.id,
        setId: (ExpenseModel object, int id) {
          object.id = id;
        },
        objectToFB: (ExpenseModel object, fb.Builder fbb) {
          final categoryOffset = fbb.writeString(object.category);
          final dateOffset = fbb.writeString(object.date);
          final noteOffset =
              object.note == null ? null : fbb.writeString(object.note!);
          final imageOffset =
              object.image == null ? null : fbb.writeListInt8(object.image!);
          final expenseByOffset = fbb.writeString(object.expenseBy);
          final billNoOffset =
              object.billNo == null ? null : fbb.writeString(object.billNo!);
          final subCategoryOffset = fbb.writeString(object.subCategory);
          final modelIdOffset = fbb.writeString(object.modelId);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryOffset);
          fbb.addOffset(2, dateOffset);
          fbb.addFloat64(3, object.amount);
          fbb.addOffset(4, noteOffset);
          fbb.addOffset(5, imageOffset);
          fbb.addOffset(6, expenseByOffset);
          fbb.addOffset(7, billNoOffset);
          fbb.addOffset(8, subCategoryOffset);
          fbb.addOffset(9, modelIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final imageParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 14) as Uint8List?;
          final expenseByParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final noteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final billNoParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final subCategoryParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, '');
          final object = ExpenseModel(
              category: categoryParam,
              amount: amountParam,
              date: dateParam,
              image: imageParam,
              expenseBy: expenseByParam,
              note: noteParam,
              billNo: billNoParam,
              subCategory: subCategoryParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..modelId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '');

          return object;
        }),
    SettingModel: EntityDefinition<SettingModel>(
        model: _entities[1],
        toOneRelations: (SettingModel object) => [],
        toManyRelations: (SettingModel object) => {},
        getId: (SettingModel object) => object.id,
        setId: (SettingModel object, int id) {
          object.id = id;
        },
        objectToFB: (SettingModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(3, nameOffset);
          fbb.addOffset(4, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = SettingModel(type: typeParam, name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ExpenseModel] entity fields to define ObjectBox queries.
class ExpenseModel_ {
  /// see [ExpenseModel.id]
  static final id =
      QueryIntegerProperty<ExpenseModel>(_entities[0].properties[0]);

  /// see [ExpenseModel.category]
  static final category =
      QueryStringProperty<ExpenseModel>(_entities[0].properties[1]);

  /// see [ExpenseModel.date]
  static final date =
      QueryStringProperty<ExpenseModel>(_entities[0].properties[2]);

  /// see [ExpenseModel.amount]
  static final amount =
      QueryDoubleProperty<ExpenseModel>(_entities[0].properties[3]);

  /// see [ExpenseModel.note]
  static final note =
      QueryStringProperty<ExpenseModel>(_entities[0].properties[4]);

  /// see [ExpenseModel.image]
  static final image =
      QueryByteVectorProperty<ExpenseModel>(_entities[0].properties[5]);

  /// see [ExpenseModel.expenseBy]
  static final expenseBy =
      QueryStringProperty<ExpenseModel>(_entities[0].properties[6]);

  /// see [ExpenseModel.billNo]
  static final billNo =
      QueryStringProperty<ExpenseModel>(_entities[0].properties[7]);

  /// see [ExpenseModel.subCategory]
  static final subCategory =
      QueryStringProperty<ExpenseModel>(_entities[0].properties[8]);

  /// see [ExpenseModel.modelId]
  static final modelId =
      QueryStringProperty<ExpenseModel>(_entities[0].properties[9]);
}

/// [SettingModel] entity fields to define ObjectBox queries.
class SettingModel_ {
  /// see [SettingModel.id]
  static final id =
      QueryIntegerProperty<SettingModel>(_entities[1].properties[0]);

  /// see [SettingModel.name]
  static final name =
      QueryStringProperty<SettingModel>(_entities[1].properties[1]);

  /// see [SettingModel.type]
  static final type =
      QueryStringProperty<SettingModel>(_entities[1].properties[2]);
}
